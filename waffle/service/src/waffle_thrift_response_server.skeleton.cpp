// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "waffle_thrift_response.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class waffle_thrift_responseHandler : virtual public waffle_thrift_responseIf {
 public:
  waffle_thrift_responseHandler() {
    // Your initialization goes here
  }

  void async_response(const sequence_id& seq_id, const int32_t op_code, const std::vector<std::string> & result) {
    // Your implementation goes here
    printf("async_response\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<waffle_thrift_responseHandler> handler(new waffle_thrift_responseHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new waffle_thrift_responseProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

